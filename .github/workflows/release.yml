name: Release

on:
  push: { branches: [ main, develop ] }
  workflow_dispatch: {}

concurrency:
  group: release

jobs:
  compile-and-release:
    name: Compile & release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Nix
        uses: cachix/install-nix-action@v15
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org/

      - name: Print nixpkgs version
        run: |
          nix-instantiate --eval -E '"nixpkgs version: ${(import <nixpkgs> {}).lib.version}"'

      - name: Select Nix packages
        id: nix-packages
        run: |
          printf '(import ./QMK/shell.nix {}).buildInputs++(import ./QMK/shell.nix {}).nativeBuildInputs++(import ./shell.nix {}).buildInputs++(import ./shell.nix {}).nativeBuildInputs' >./sources.nix
          printf 'Packages:\n'
          nix-instantiate --eval --strict --expr 'builtins.toString (builtins.sort builtins.lessThan (builtins.map (x: builtins.elemAt (builtins.match "^.{33}(.+)$" (builtins.baseNameOf (builtins.toString x))) 0) (import ./sources.nix)))' | sed 's/ /\n/g;s/"//g'

          nix-instantiate --eval --strict --expr 'builtins.replaceStrings [" "] [""] (builtins.toString (builtins.sort builtins.lessThan (builtins.map (x: builtins.elemAt (builtins.match "^(.{32}).+$" (builtins.baseNameOf (builtins.toString x))) 0) (import ./sources.nix))))' | sed 's/"//g' | xargs -i printf '::set-output name=hash::%s\n' '{}'

      - name: Set up Nix cache
        uses: actions/cache@v2
        id: nix-cache
        with:
          path: |
            /nix/store/
            /nix/var/nix/profiles/per-user/*/profile/bin
            /nix/var/nix/profiles/default/bin/
            /nix/var/nix/profiles/per-user/root/channels
          key: |
            nix-${{ steps.nix-packages.outputs.hash }}

      - name: Install Nix packages
        if: steps.nix-cache.outputs.cache-hit != 'true'
        run: |
          nix-env -i -f ./sources.nix

      - name: Compile
        run: nix-shell --run compile

      - name: Create tag
        id: tag
        run: |
          TAG="$(date '+v%y.%m.%d.%H%M%S')${{ github.ref != 'refs/heads/main' && '-RC' || '' }}"
          git tag "${TAG}"
          git push --tags

          printf '::set-output name=tag::%s\n' "${TAG}"

      - name: Create changelog
        run: |
          git fetch --tags

          printf 'Reference:\n'
          printf '%s\n\n' "${GITHUB_REF}"
          printf 'Latest tags:\n'
          git tag -l --sort=-version:refname | head -10
          printf '\n'
          printf 'Latest full release tags:\n'
          git tag -l --sort=-version:refname | grep -P '^v\\d{2}\\.\\d{2}\\.\\d{2}\\.\\d{6}$' | head -10
          printf '\n'
          printf 'Current tag:\n'
          local TAG="${steps.tag.outputs.tag}"
          printf '%s\n\n' "${TAG}"
          printf 'last tag:\n'
          if [ "${GITHUB_REF_NAME}" = 'main' ] && [ "$(git tag -l | grep -P '^v\\d{2}\\.\\d{2}\\.\\d{2}\\.\\d{6}$' | wc -l)" -ge 2 ] ; then
            local LAST_TAG="$(git tag -l --sort=-version:refname | grep -P '^v\\d{2}\\.\\d{2}\\.\\d{2}\\.\\d{6}$' | sed -n '2{p;q;}')"

          elif [ "$(git tag -l | wc -l)" -ge 2 ] ; then
            local LAST_TAG="$(git tag -l --sort=-version:refname | sed -n '2{p;q;}')"

          else
            local LAST_TAG="$(git rev-list --max-parents=0 HEAD)"
          fi
          printf '%s\n\n' "${LAST_TAG}"

          printf '[Commits to %s since this release]' "${GITHUB_REF_NAME}" >>'.build/CHANGELOG.md'
          printf '(%s/%s/compare/' "${GITHUB_SERVER_URL}" "${GITHUB_REPOSITORY}" >>'.build/CHANGELOG.md'
          printf '%s...%s)' "${{ steps.tag.outputs.tag }}" "${GITHUB_REF_NAME}" >>'.build/CHANGELOG.md'
          printf '\n\n' >>'.build/CHANGELOG.md'

          printf '[Full changelog]' >>'.build/CHANGELOG.md'
          printf '(%s/%s/compare/' "${GITHUB_SERVER_URL}" "${GITHUB_REPOSITORY}" >>'.build/CHANGELOG.md'
          if [ "${GITHUB_REF_NAME}" = 'main' ] && [ "$(git tag -l | grep -P '^v\\d{2}\\.\\d{2}\\.\\d{2}\\.\\d{6}$' | wc -l)" -ge 2 ] ; then
            printf '%s...%s)' "$(git tag -l --sort=version:refname | grep -P '^v\\d{2}\\.\\d{2}\\.\\d{2}\\.\\d{6}$' | tail -2 | head -1)" "${{ steps.tag.outputs.tag }}" >>'.build/CHANGELOG.md'

          elif [ "$(git tag -l | wc -l)" -ge 2 ] ; then
            printf '%s...%s)' "$(git tag -l --sort=version:refname | tail -2 | head -1)" "${{ steps.tag.outputs.tag }}" >>'.build/CHANGELOG.md'

          else
            printf '%s...%s)' "$(git rev-list --max-parents=0 HEAD)" "${{ steps.tag.outputs.tag }}" >>'.build/CHANGELOG.md'
          fi
          printf '\n\n' >>'.build/CHANGELOG.md'

      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./.build/firmware.hex
          tag_name: ${{ steps.tag.outputs.tag }}
          body_path: .build/CHANGELOG.md
          prerelease: ${{ github.ref != 'refs/heads/main' }}
